---
description: 
globs: 
alwaysApply: true
---
# Product Information Management (PIM) System Plan

## 1. Overview
This document outlines a structured approach for building a Product Information Management (PIM) system tailored to the needs of a skincare-focused e-commerce platform. It will serve as a robust, AI-powered platform for product data, ingredients, related items, suggestions, analytics, and more. Built with scalability, modularity, and developer ergonomics in mind, the system will support:

- Data ingestion from Google Sheets (existing product data source).
- Vector-based semantic search and product replacement suggestions.
- WCAG 2.1 AA-compliant UI for inclusive, accessible user experiences.
- Clerk-based authentication for secure login and user management.
- Dedicated API Gateway for routing and consistent security practices.

## 2. Core Principles
- **SOLID** – Maintainable and extendable code.
- **DRY** – Shared modules, interfaces, constants.
- **KISS** – Usability and minimalism first.
- **Modularity-First** – Self-contained and pluggable features.
- **Atomic Commits & CI/CD** – Small commits, continuous integration.
- **Domain-Driven Design (DDD)** – Clear separation of concerns.
- **Type Safety** – TypeScript on both front and back ends.
- **Naming Conventions**
  - PascalCase for classes
  - camelCase for functions/variables
  - kebab-case for file names
- **OpenAPI** – Swagger for API contracts.
- **Security & Authentication** – Clerk-based auth flows.
- **WCAG 2.1 AA Compliance** – Accessibility and contrast guidelines.

## 3. Tech Stack

### 3.1 Frontend
- **Framework:** React + Vite or Next.js
- **Styling:** Tailwind CSS + ShadCN UI #fetch @https://tailwindcss.com/docs/installation/using-vite and use the dc
- **Drag & Drop:** `@dnd-kit/core` or `react-dnd`
- **Data Fetching:** React Query / SWR
- **State Management:** Zustand / Redux Toolkit
- **Accessibility:**
  - WAI-ARIA roles
  - Keyboard navigation
  - Screen reader support
  - Color contrast testing
- **Routing:**
  - File-based (Next.js)
  - React Router (Vite + React)

### 3.2 Backend
- **Language:** Node.js (NestJS or Express + TypeScript)
- **Auth:** Clerk (JWT-based)
- **Databases:**
  - PostgreSQL (structured product data)
  - MongoDB (optional: semi-structured docs)
- **Vector DB:** Weaviate / Qdrant
- **File Storage:** S3-compatible (AWS, Supabase, MinIO)
- **Task Queue:** BullMQ (Redis-based)
- **Search Engine:** Typesense / Elasticsearch (optional)

### 3.3 API Gateway
- **Framework:** Express Gateway or custom Express.js
- **Responsibilities:**
  - Route to microservices
  - Attach Clerk session
  - Rate limiting & validation
  - Observability/logging

### 3.4 DevOps
- **Containerization:** Docker + docker-compose
- **Hosting:**
  - Frontend: Vercel / Netlify
  - Backend + Gateway: Railway / Render / AWS
- **CI/CD:** GitHub Actions
- **Monitoring:** Sentry, AWS Logs, Datadog
- **Security:**
  - HTTPS
  - OWASP top 10 audits
  - Rate limiting/input validation
  - Staging vs. production envs


## 9. Quality Standards
- **Testing:** Jest, Playwright/Cypress
- **Linting:** ESLint + Prettier
- **API Docs:** Swagger
- **Monitoring:** Sentry/Datadog
- **Security:** HTTPS, input validation, logging hygiene
- **WCAG:** Keyboard nav, color contrast, screen reader



## 11. Conclusion
By following these guidelines, you’ll build a highly maintainable, modular, and secure PIM system with advanced semantic search, robust data handling, and modern developer ergonomics.

## 12. Additional Considerations
# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_YW1hemVkLWNhbWVsLTUyLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_trCG4Eig1QStAIalgCWgFqSFoMgpEe6h1m6WxXZQEE
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/

Integrate Clerk for authentication using the following docs:
https://clerk.com/docs/quickstarts/nextjs  
https://clerk.com/docs/quickstarts/nextjs-pages-router  
https://clerk.com/docs/references/nextjs/clerk-middleware  
https://clerk.com/docs/references/nextjs/read-session-data  
https://clerk.com/docs/references/nextjs/basic-rbac  
https://clerk.com/docs/references/nextjs/rendering-modes  
https://clerk.com/docs/references/nextjs/geo-blocking  

# Database
DATABASE_URL=postgresql://pim_user:pim_password@postgres:5432/pim_db

### ✅ Next Steps
- Confirm design stack (NestJS/Express + Next.js/Vite).
- Set up MVP with Clerk and CRUD.
- Build CI/CD.
- Connect Sheets.
- Expand AI & UX features.

Let me know if you want a code scaffold to kick things off!


This prompt defines the core monolith server in a hybrid architecture. It houses the performance-critical, tightly integrated modules such as product management, stock, attributes, catalogs, and user/role logic. It connects to internal infrastructure (PostgreSQL, Redis), and exposes internal-only APIs consumed by the API Gateway.

🧠 Note: The AI/vector logic (Qdrant + embeddings) is offloaded to the ai-service. The monolith remains lean, transactional, and focused.

🧱 Purpose
Host core business logic for the PIM system

Ensure data consistency across transactional flows

Keep performance-critical modules co-located

Allow AI, analytics, and integrations to scale independently

Maintain low memory, fast cold starts, and quick response times

⚙️ Tech Stack

Layer	Tech
Framework	NestJS (Monorepo-ready)
DB	PostgreSQL via Prisma ORM
Cache	Redis
Auth	Header-based (Clerk via API Gateway)
Messaging	Redis Pub/Sub or Kafka (optional)
Infrastructure	Docker + Coolify
📦 Core Modules
Each module is a full NestJS feature module (controller, service, dto, prisma, guards, etc.)


Module	Description
ProductsModule	CRUD + variants, barcodes, attributes, pricing
CategoriesModule	Hierarchical, localized slugs and filters
IngredientsModule	INCI name, aliasing, tags
BundlesModule	Skincare kits, grouped product sets
VariantsModule	Sizes, colors, localized SKUs
MediaModule	References to external images, PDFs
StockModule	Channel-based inventory, min/max logic
UsersModule	RBAC roles + audit history
AttributesModule	Custom fields like SPF, skin type
BarcodeModule	EAN/UPC/GTIN fallback and multi-barcode logic
ChannelsModule	Webshop, Amazon, Retail, etc.
CatalogsModule	Logical exports: “Nordic”, “Wholesale”
LifecycleModule	Approvals, change history, status
PackagingModule	Volume, weight, sustainability data
UserEventsModule	Logs for changes: who, what, when
MetafieldsModule	Flexible, schema-aware custom fields
TagsModule	Manual tagging (AI tagging lives in ai-service)
ComplianceModule	Country rules + banned ingredients
📁 Folder Structure
css
Kopier
Rediger
backend/
├── src/
│   ├── main.ts
│   ├── app.module.ts
│   ├── modules/
│   │   ├── products/
│   │   ├── categories/
│   │   └── ... all core modules
│   ├── infrastructure/
│   │   ├── database/
│   │   ├── redis/
│   │   ├── cache/
│   │   └── google-sheets/ (internal jobs only)
│   ├── common/
│   │   ├── middleware/
│   │   ├── guards/
│   │   ├── interceptors/
│   │   └── decorators/
│   ├── event-handlers/
│   └── config/
✅ Functional Requirements
Each module must support:

🗑️ Soft deletes

🌐 i18n support (localized fields)

🧱 Prisma schemas with relational logic

🛠️ DTO validation via Zod or Yup

🔒 Role-based guards (admin, editor, viewer)

🔁 Audit logs via UserEventsModule

🌍 Channel-awareness (stock, price, visibility)

🔗 Internal-only APIs — proxied via API Gateway

🔌 Infrastructure Requirements
PostgreSQL (Prisma ORM)

Redis for caching, pub/sub

Kafka (optional) for event-driven integrations

Middleware:

Request logging

Header-based context injection

Request tracing (x-request-id, x-user-id, x-org-id)

🔐 Auth: Header-Based Context (Trusted)
All requests must come from API Gateway. Validate headers:

http
Kopier
Rediger
X-User-Id: clerk_user_id
X-User-Roles: admin,editor
X-Org-Id: org_id
X-Auth-Signature: optional (HMAC verification)
Use @Headers() to inject user context.

🛡️ Recommended: Middleware to enforce required headers and attach req.userContext.

🔁 Communication

Event	Transport
Product created/updated	Redis pub/sub
Stock warning	Redis or Kafka
AI tagging trigger	Redis to ai-service
Analytics tracking	HTTP or Redis
Approvals/notifications	Redis to notifications-service
⛔️ What’s Excluded (Handled Elsewhere)

Concern	Service
AI (embedding, Qdrant, GPT)	ai-service
File uploads, PDFs	content-service
Analytics and reports	analytics-service
Catalog exports, webhooks	integration-service
WooCommerce/Shopify sync	integration-service
🔐 Security Model
✅ Gateway performs full Clerk auth

✅ Gateway injects verified headers

✅ Backend trusts internal calls only

✅ Future: add HMAC signature for extra verification

✅ No public API exposure

📚 Reference Docs
NestJS
https://docs.nestjs.com/
https://docs.nestjs.com/techniques/performance
https://docs.nestjs.com/recipes/prisma
https://docs.nestjs.com/microservices/kafka

Prisma
https://www.prisma.io/docs/

Redis
https://redis.io/docs/


